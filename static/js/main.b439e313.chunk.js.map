{"version":3,"sources":["redux/actions/types.js","views/Hoc/require_auth.js","redux/reducers/rootReducer.js","redux/reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["AUTH_USER","UNAUTH_USER","AUTH_ERROR","TODOINDEX","TODOMODEL","ComposedComponent","Authentication","console","log","this","props","authenticated","history","push","nextProps","Component","contextTypes","router","PropTypes","object","connect","state","simpleReducer","combineReducers","action","type","error","payload","DefaultLayout","React","lazy","Login","Register","token","localStorage","getItem","store","applyMiddleware","reduxThunk","createStore","createStoreWithMiddleware","reducers","dispatch","App","isOpen","Suspense","fallback","className","path","name","render","component","RequireAuth","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GAAA,0KAAO,IAAMA,EAAY,YACZC,EAAc,cACdC,EAAa,aAGbC,EAAY,YAGZC,EAAY,a,wPCJV,WAASC,GAAoB,IACpCC,EADmC,kLAGrCC,QAAQC,IAAI,qBACPC,KAAKC,MAAMC,eAEbF,KAAKC,MAAME,QAAQC,KAAK,YANU,0CAWnBC,GAClBP,QAAQC,IAAI,uBACPM,EAAUH,eACbF,KAAKC,MAAME,QAAQC,KAAK,YAdW,+BAoBrC,OAAO,kBAACR,EAAsBI,KAAKC,WApBE,GACZK,aA+B7B,OAJAT,EAAeU,aAAe,CAC5BC,OAAQC,IAAUC,QAGbC,aARP,SAAyBC,GAExB,OADCd,QAAQC,IAAI,sBAAsBa,EAAMC,eAClC,CAAEX,cAAeU,EAAMC,cAAcX,iBAMtCS,CAAyBd,I,uBCjCnBiB,cAAgB,CAC7BD,cCIa,WAAyB,IAAxBD,EAAuB,uDAAf,GAAIG,EAAW,uCACrC,OAAQA,EAAOC,MACb,KAAKzB,IACL,OAAO,2BAAKqB,GAAZ,IAAmBK,MAAO,GAAIf,eAAe,EAAKgB,QAAQH,EAAOG,UACjE,KAAK1B,IACL,OAAO,2BAAKoB,GAAZ,IAAmBV,eAAe,IAClC,KAAKT,IACL,OAAO,2BAAKmB,GAAZ,IAAmBK,MAAOF,EAAOG,UACjC,KAAKxB,IAEL,KAAKC,IACL,OAAO,2BAAKiB,GAAZ,IAAmBM,QAASH,EAAOG,UAEnC,QACE,OAAON,M,QCLPO,G,MAAgBC,IAAMC,MAAK,kBAAM,yDACjCC,EAAQF,IAAMC,MAAK,kBAAM,qEACzBE,EAAWH,IAAMC,MAAK,kBAAM,qEAC5BG,EAAQC,aAAaC,QAAQ,kBAE7BC,EAD4BC,YAAgBC,IAAhBD,CAA4BE,IAChDC,CAA0BC,GAGpCR,GACFG,EAAMM,SAAS,CAACjB,KAAMzB,M,IAKH2C,E,kDAGlB,WAAYjC,GAAO,IAAD,8BAEjB,cAAMA,IACAW,MAAM,CACRuB,QAAO,GAJM,E,qDAYjB,OACC,kBAAC,IAAD,CAAUR,MAAOA,GACjB,kBAAC,IAAD,KACK,kBAAC,IAAMS,SAAP,CAAgBC,SAnCJ,yBAAKC,UAAU,oCAAf,eAoCV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,KAAK,SAASC,KAAK,QAAQC,OAAQ,SAAAxC,GAAK,OAAG,kBAACqB,EAAUrB,MAC9D,kBAAC,IAAD,CAAQsC,KAAK,YAAYC,KAAK,WAAWC,OAAQ,SAAAxC,GAAK,OAAG,kBAACsB,EAAatB,MACvE,kBAAC,IAAD,CAAQsC,KAAK,IAAIC,KAAK,OAAOE,UAAWC,GAAY,SAAA1C,GAAK,OAAG,kBAACkB,EAAkBlB,SAEjF,kBAAC,IAAD,a,GAxBqBmB,IAAMd,WCnBnBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASR,OACR,kBAAC,EAAD,MACIS,SAASC,eAAe,SDsHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b439e313.chunk.js","sourcesContent":["export const AUTH_USER = 'AUTH_USER';\nexport const UNAUTH_USER = 'UNAUTH_USER';\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const TRY_CONNECT = 'TRY_CONNECT';\nexport const DASHBOARD = 'DASHBOARD';\nexport const TODOINDEX = 'TODOINDEX';\nexport const TODOCREATE = 'TODOCREATE';\nexport const TODOUPDATE = 'TODOUPDATE';\nexport const TODOMODEL = 'TODOMODEL';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nexport default function(ComposedComponent) {\n  class Authentication extends Component {\n    componentDidMount() {\n      console.log(\"componentDidMount\");\n      if (!this.props.authenticated) {\n      \n         this.props.history.push('/login');\n       // this.context.router.history.push('/login');\n      }\n    }\n\n    componentWillUpdate(nextProps) {\n      console.log(\"componentWillUpdate\");\n      if (!nextProps.authenticated) {\n        this.props.history.push('/login');\n       // this.context.router.history.push('/login');\n      }\n    }\n\n    render() {\n      return <ComposedComponent {...this.props} />\n    }\n  }\n\n  function mapStateToProps(state) {\n    console.log(\"ccccccccccccccccccc\",state.simpleReducer);\n   return { authenticated: state.simpleReducer.authenticated };\n  }\n  Authentication.contextTypes = {\n    router: PropTypes.object\n  }\n\n  return connect(mapStateToProps)(Authentication);\n}","import { combineReducers } from 'redux';\nimport simpleReducer from './index';\n\nexport default combineReducers({\n  simpleReducer\n});","import {\n  AUTH_USER,\n  UNAUTH_USER,\n  AUTH_ERROR,\n  TODOINDEX,TODOMODEL,\n  \n} from '../actions/types';\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case AUTH_USER:\n    return { ...state, error: '', authenticated: true,payload:action.payload}\n    case UNAUTH_USER:\n    return { ...state, authenticated: false}\n    case AUTH_ERROR:\n    return { ...state, error: action.payload}\n    case TODOINDEX:\n    return { ...state, payload: action.payload}\n    case TODOMODEL:\n    return { ...state, payload: action.payload}\n   \n    default:\n      return state\n  }\n}","import React from 'react';\nimport \"./style.css\"\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nimport { createStore, applyMiddleware } from 'redux';\n\nimport RequireAuth from './views/Hoc/require_auth';\nimport { AUTH_USER } from './redux/actions/types';\nimport reduxThunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport reducers from './redux/reducers/rootReducer'\nimport { ToastContainer } from 'react-toastify';\n\nimport 'react-toastify/dist/ReactToastify.css';\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\n\n\nconst DefaultLayout = React.lazy(() => import('./containers/DefaultLayout'));\nconst Login = React.lazy(() => import('./views/Login'));\nconst Register = React.lazy(() => import('./views/Register'));\nconst token = localStorage.getItem('auth_jwt_token');\nconst createStoreWithMiddleware = applyMiddleware(reduxThunk)(createStore);\nconst store = createStoreWithMiddleware(reducers)\n\n// if we have a token, consider the user to be signed in\nif (token) {\n  store.dispatch({type: AUTH_USER})\n}\n\n\n\nexport default class App extends React.Component {\n\n\n   constructor(props){\n\n    super(props);\n     this.state={\n        isOpen:false\n     }\n}\n\n  \n\n   render(){\n\n    return ( \n     <Provider store={store}>\n     <HashRouter>\n          <React.Suspense fallback={loading()}>\n            <Switch>\n              <Route  path=\"/login\" name=\"Login\" render={props =><Login {...props}/>} />\n              <Route  path=\"/register\" name=\"Register\" render={props =><Register {...props}/>} />\n              <Route  path=\"/\" name=\"Home\" component={RequireAuth(props =><DefaultLayout {...props}/>)} />\n            </Switch>\n            <ToastContainer />\n          </React.Suspense>\n      </HashRouter>\n      </Provider>\n  );\n   }\n  \n}\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(\n\t<App />\n   , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}